{"ast":null,"code":"var _jsxFileName = \"/myfiles/myworkspace/learn-exps/src/index.js\";\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import { Router, Route, Link } from 'react-router'\n// import './index.css';\n// import App from './App';\n// import * as serviceWorker from './serviceWorker';\n// ReactDOM.render(<App />, document.getElementById('root'));\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\nimport React from 'react';\nimport { Router, Route, Link } from 'react-router';\nconst App = React.createClass({\n  /*...*/\n\n  displayName: \"App\"\n});\nconst About = React.createClass({\n  /*...*/\n\n  displayName: \"About\"\n}); // 等等。\n\nconst Users = React.createClass({\n  displayName: \"Users\",\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, \"Users\"), React.createElement(\"div\", {\n      className: \"master\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, this.state.users.map(user => React.createElement(\"li\", {\n      key: user.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/user/\".concat(user.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    }, user.name))))), React.createElement(\"div\", {\n      className: \"detail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, this.props.children));\n  }\n\n});\nconst User = React.createClass({\n  displayName: \"User\",\n\n  componentDidMount() {\n    this.setState({\n      // 路由应该通过有用的信息来呈现，例如 URL 的参数\n      user: findUserById(this.props.params.userId)\n    });\n  },\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, this.state.user.name));\n  }\n\n}); // 路由配置说明（你不用加载整个配置，\n// 只需加载一个你想要的根路由，\n// 也可以延迟加载这个配置）。\n\nReact.render(React.createElement(Router, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 65\n  },\n  __self: this\n}, React.createElement(Route, {\n  path: \"/\",\n  component: App,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 66\n  },\n  __self: this\n}, React.createElement(Route, {\n  path: \"about\",\n  component: About,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 67\n  },\n  __self: this\n}), React.createElement(Route, {\n  path: \"users\",\n  component: Users,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 68\n  },\n  __self: this\n}, React.createElement(Route, {\n  path: \"/user/:userId\",\n  component: User,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 69\n  },\n  __self: this\n})), React.createElement(Route, {\n  path: \"*\",\n  component: NoMatch,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 71\n  },\n  __self: this\n}))), document.getElementById('root'));","map":{"version":3,"sources":["/myfiles/myworkspace/learn-exps/src/index.js"],"names":["React","Router","Route","Link","App","createClass","About","Users","render","state","users","map","user","id","name","props","children","User","componentDidMount","setState","findUserById","params","userId","NoMatch","document","getElementById"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,IAAxB,QAAoC,cAApC;AAEA,MAAMC,GAAG,GAAGJ,KAAK,CAACK,WAAN,CAAkB;AAAC;;AAAD;AAAA,CAAlB,CAAZ;AACA,MAAMC,KAAK,GAAGN,KAAK,CAACK,WAAN,CAAkB;AAAC;;AAAD;AAAA,CAAlB,CAAd,C,CACA;;AAEA,MAAME,KAAK,GAAGP,KAAK,CAACK,WAAN,CAAkB;AAAA;;AAC9BG,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,EAEE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEG,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,GAAjB,CAAqBC,IAAI,IACxB;AAAI,MAAA,GAAG,EAAEA,IAAI,CAACC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAkB,oBAAC,IAAD;AAAM,MAAA,EAAE,kBAAWD,IAAI,CAACC,EAAhB,CAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA+BD,IAAI,CAACE,IAApC,CAAlB,CADD,CAFH,CADF,CAFF,EAUE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKC,KAAL,CAAWC,QADd,CAVF,CADF;AAgBD;;AAlB6B,CAAlB,CAAd;AAqBA,MAAMC,IAAI,GAAGjB,KAAK,CAACK,WAAN,CAAkB;AAAA;;AAC7Ba,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,QAAL,CAAc;AACZ;AACAP,MAAAA,IAAI,EAAEQ,YAAY,CAAC,KAAKL,KAAL,CAAWM,MAAX,CAAkBC,MAAnB;AAFN,KAAd;AAID,GAN4B;;AAQ7Bd,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKC,KAAL,CAAWG,IAAX,CAAgBE,IAArB,CADF,CADF;AAMD;;AAf4B,CAAlB,CAAb,C,CAkBA;AACA;AACA;;AACAd,KAAK,CAACQ,MAAN,CACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,oBAAC,KAAD;AAAO,EAAA,IAAI,EAAC,GAAZ;AAAgB,EAAA,SAAS,EAAEJ,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,oBAAC,KAAD;AAAO,EAAA,IAAI,EAAC,OAAZ;AAAoB,EAAA,SAAS,EAAEE,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,EAEE,oBAAC,KAAD;AAAO,EAAA,IAAI,EAAC,OAAZ;AAAoB,EAAA,SAAS,EAAEC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE,oBAAC,KAAD;AAAO,EAAA,IAAI,EAAC,eAAZ;AAA4B,EAAA,SAAS,EAAEU,IAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,CAFF,EAKE,oBAAC,KAAD;AAAO,EAAA,IAAI,EAAC,GAAZ;AAAgB,EAAA,SAAS,EAAEM,OAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EALF,CADF,CADF,EAUGC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAVH","sourcesContent":["// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import { Router, Route, Link } from 'react-router'\n// import './index.css';\n// import App from './App';\n// import * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\nimport React from 'react'\nimport { Router, Route, Link } from 'react-router'\n\nconst App = React.createClass({/*...*/})\nconst About = React.createClass({/*...*/})\n// 等等。\n\nconst Users = React.createClass({\n  render() {\n    return (\n      <div>\n        <h1>Users</h1>\n        <div className=\"master\">\n          <ul>\n            {/* 在应用中用 Link 去链接路由 */}\n            {this.state.users.map(user => (\n              <li key={user.id}><Link to={`/user/${user.id}`}>{user.name}</Link></li>\n            ))}\n          </ul>\n        </div>\n        <div className=\"detail\">\n          {this.props.children}\n        </div>\n      </div>\n    )\n  }\n})\n\nconst User = React.createClass({\n  componentDidMount() {\n    this.setState({\n      // 路由应该通过有用的信息来呈现，例如 URL 的参数\n      user: findUserById(this.props.params.userId)\n    })\n  },\n\n  render() {\n    return (\n      <div>\n        <h2>{this.state.user.name}</h2>\n        {/* 等等。 */}\n      </div>\n    )\n  }\n})\n\n// 路由配置说明（你不用加载整个配置，\n// 只需加载一个你想要的根路由，\n// 也可以延迟加载这个配置）。\nReact.render((\n  <Router>\n    <Route path=\"/\" component={App}>\n      <Route path=\"about\" component={About}/>\n      <Route path=\"users\" component={Users}>\n        <Route path=\"/user/:userId\" component={User}/>\n      </Route>\n      <Route path=\"*\" component={NoMatch}/>\n    </Route>\n  </Router>\n), document.getElementById('root'))\n"]},"metadata":{},"sourceType":"module"}